// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: health-service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HealthServiceApiClient is the client API for HealthServiceApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthServiceApiClient interface {
	GetAllTargets(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetAllTargetsByMetadata(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetAllMetricsByTargetType(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type healthServiceApiClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthServiceApiClient(cc grpc.ClientConnInterface) HealthServiceApiClient {
	return &healthServiceApiClient{cc}
}

func (c *healthServiceApiClient) GetAllTargets(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/main.HealthServiceApi/GetAllTargets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceApiClient) GetAllTargetsByMetadata(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/main.HealthServiceApi/GetAllTargetsByMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceApiClient) GetAllMetricsByTargetType(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/main.HealthServiceApi/GetAllMetricsByTargetType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthServiceApiServer is the server API for HealthServiceApi service.
// All implementations must embed UnimplementedHealthServiceApiServer
// for forward compatibility
type HealthServiceApiServer interface {
	GetAllTargets(context.Context, *EmptyRequest) (*EmptyResponse, error)
	GetAllTargetsByMetadata(context.Context, *EmptyRequest) (*EmptyResponse, error)
	GetAllMetricsByTargetType(context.Context, *EmptyRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedHealthServiceApiServer()
}

// UnimplementedHealthServiceApiServer must be embedded to have forward compatible implementations.
type UnimplementedHealthServiceApiServer struct {
}

func (UnimplementedHealthServiceApiServer) GetAllTargets(context.Context, *EmptyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTargets not implemented")
}
func (UnimplementedHealthServiceApiServer) GetAllTargetsByMetadata(context.Context, *EmptyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTargetsByMetadata not implemented")
}
func (UnimplementedHealthServiceApiServer) GetAllMetricsByTargetType(context.Context, *EmptyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMetricsByTargetType not implemented")
}
func (UnimplementedHealthServiceApiServer) mustEmbedUnimplementedHealthServiceApiServer() {}

// UnsafeHealthServiceApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthServiceApiServer will
// result in compilation errors.
type UnsafeHealthServiceApiServer interface {
	mustEmbedUnimplementedHealthServiceApiServer()
}

func RegisterHealthServiceApiServer(s grpc.ServiceRegistrar, srv HealthServiceApiServer) {
	s.RegisterService(&HealthServiceApi_ServiceDesc, srv)
}

func _HealthServiceApi_GetAllTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceApiServer).GetAllTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.HealthServiceApi/GetAllTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceApiServer).GetAllTargets(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthServiceApi_GetAllTargetsByMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceApiServer).GetAllTargetsByMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.HealthServiceApi/GetAllTargetsByMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceApiServer).GetAllTargetsByMetadata(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthServiceApi_GetAllMetricsByTargetType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceApiServer).GetAllMetricsByTargetType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.HealthServiceApi/GetAllMetricsByTargetType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceApiServer).GetAllMetricsByTargetType(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthServiceApi_ServiceDesc is the grpc.ServiceDesc for HealthServiceApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthServiceApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.HealthServiceApi",
	HandlerType: (*HealthServiceApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllTargets",
			Handler:    _HealthServiceApi_GetAllTargets_Handler,
		},
		{
			MethodName: "GetAllTargetsByMetadata",
			Handler:    _HealthServiceApi_GetAllTargetsByMetadata_Handler,
		},
		{
			MethodName: "GetAllMetricsByTargetType",
			Handler:    _HealthServiceApi_GetAllMetricsByTargetType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "health-service.proto",
}
